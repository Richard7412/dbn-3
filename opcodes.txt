END
  ends the program
  
SET_LINE_NO (no)
  line_no <-- no

STORE (name):
  pop
  env[name] <-- top

LOAD (name):
  push env[name]

LOAD_INTEGER (n):
  push n

LOAD_STRING (name):
  push n

SET_DOT:
  pop
  pop
  pop
  Set [TOP TOP1] TOP2

GET_DOT:
  pop
  pop
  push [TOP TOP1]
  
BINARY_ADD:
  pop
  pop
  push TOP + TOP1

BINARY_SUB:
  pop
  pop
  push TOP - TOP1

BINARY_DIV:
  pop
  pop
  push TOP / TOP1

BINARY_MUL:
  pop
  pop
  push TOP * TOP1

COMPARE_SAME:
  pop
  pop
  push TOP == TOP1

COMPARE_SMALLER:
  pop
  pop
  push TOP < TOP1

DUP_TOPX (x):
  duplicates top x

POP_TOPX (x):
  pops top x

ROT_TWO:
  swaps top 2

JUMP (x):
  jumps to x

POP_JUMP_IF_FALSE (x):
  pop
  if TOP is false, jumps to x

POP_JUMP_IF_TRUE (x):
  pop
  if TOP is true, jumps to x

REPEAT_STEP (x):
  the footer of a repeat in one opcode.
  if TOP == TOP1:
    pop
    pop
    pointer <- pointer + 1
  else:
    if TOP < TOP1, NEW = TOP + 1
    if TOP > TOP1, NEW = TOP - 1
    TOP <- NEW
    pointer <- x

DEFINE_PROCEDURE (n):
  makes a command expecting n arguments
  pop
  TOP is type of proc: 'COMMAND' or 'NUMBERDEF'
  pop
  TOP1 is address of command body start
  pop
  TOP2 is name of command
  then n more POPs, because n more formal args are expected

PROCEDURE_CALL (n):
  calls a procedure!
  pop
  TOP is type of procedure
  pop
  TOP1 is name of command
  n is number of arguments, pops that many
  pushes frame

RETURN:
  returns from a procedure
  pop
  TOP is retval
  pops frame
  push TOP old_frame

LOAD_CODE (path)
  compile and interpret the given file. defined commands and numbers
  should be accessible from the calling file

